Given a string s consisting of "a", "b" and "c"s, return the number of subsequences that have i "a" characters, followed by j "b" characters, followed by k "c" characters where i, j, k â‰¥ 1.

Example 1
Input

s = "aabc"
Output

3


Solution:

class Solution:
    def solve(self, s):
        # Initialize counts of different 
        # subsequences caused by different 
        # combination of 'a' 
        aCount = 0
    
        # Initialize counts of different 
        # subsequences caused by different 
        # combination of 'a' and different 
        # combination of 'b' 
        bCount = 0
    
        # Initialize counts of different 
        # subsequences caused by different 
        # combination of 'a', 'b' and 'c'. 
        cCount = 0
    
        # Traverse all characters 
        # of given string 
        for i in range(len(s)):
    
            # If current character is 'a', 
            # then there are following 
            # possibilities : 
            # a) Current character begins 
            # a new subsequence. 
            # b) Current character is part 
            # of aCount subsequences. 
            # c) Current character is not 
            # part of aCount subsequences. 
            if (s[i] == 'a'):
                aCount = (1 + 2 * aCount)
    
            # If current character is 'b', then 
            # there are following possibilities : 
            # a) Current character begins a 
            # new subsequence of b's with 
            # aCount subsequences. 
            # b) Current character is part 
            # of bCount subsequences. 
            # c) Current character is not 
            # part of bCount subsequences. 
            elif (s[i] == 'b'):
                bCount = (aCount + 2 * bCount)
    
            # If current character is 'c', then 
            # there are following possibilities : 
            # a) Current character begins a 
            # new subsequence of c's with 
            # bCount subsequences. 
            # b) Current character is part 
            # of cCount subsequences. 
            # c) Current character is not 
            # part of cCount subsequences. 
            elif (s[i] == 'c'):
                cCount = (bCount + 2 * cCount)
    
        return cCount
        
        
        
