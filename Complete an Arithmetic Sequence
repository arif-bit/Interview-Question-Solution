You are given a list of integers nums that used to be an arithmetic sequence. Given that a number was removed, and that the number was not the first or the last element, return the removed number.

Constraints

    2 ≤ n ≤ 100,000

Example 1
Input

nums = [1, 3, 5, 9]

Output

7


Solution:

Intuition
Notice that missing_num = full_sum - current_sum, where:

The full_sum \mathcal{S_n = \frac{(n + 1)(a_1 + a_n)}{2}}S 
n
​	
 = 
2
(n+1)(a 
1
​	
 +a 
n
​	
 )
​	
  because:
We have not removed the first or the last number so they are trusted.
The full sum should have n + 1 numbers.
The arithmetic sum formula applies.
current_sum = sum(nums), obviously.
Implementation
No tricks, do as the intuition says, but nothing else.

Time Complexity
\mathcal{O}(n)O(n) for doing the sum(), \mathcal{O}(1)O(1) for calculating the full_sum.

Space Complexity
\mathcal{O}(1)O(1) for the controlling variables only but nothing els.

class Solution:
    def solve(self, nums):
        return (nums[0] + nums[-1]) * (len(nums) + 1) // 2 - sum(nums)
        
        
        
