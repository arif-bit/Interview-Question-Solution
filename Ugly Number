Given an integer n, return whether its prime factors only include 2, 3 or 5.

Constraints

n â‰¤ 2**31 -1
Example 1
Input

n = 10
Output

True


Solution:


We will remove prime factor 2 from the number first.
Repeat dividing the number by 2 if it is still divisible by 2.
Now, we are left with an odd number.
Let's look at a list of odd numbers:
  e.g. 1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,......
They are either prime numbers or can be factored into prime numbers.
  e.g. 1, 3, 5, 7, 11, 13, 17, 19,..... are prime numbers.
  e.g 9 = 3 * 3, 15 = 3 * 5, 21 = 3 * 7, 27 = 3 * 3 * 3, 35 = 5*7, 49 = 7 * 7, ...
If we remove the lowest prime factors [3,5] from an odd number, the left-over will contain either 1 or higher prime factors [7, 11, 13, 17,...]
So we do what similar to step 1 to remove prime factor [3, 5]. What is left will be either 1 or other > 5 prime factors.
If left-over is not 1, then we have prime factors higher than 5. Return False in this case.


class Solution:
    def solve(self, n):
        # Write your code here

        for i in [2, 3, 5]:
            while n % i == 0:
                n //= i
        return True if n == 1 else False
        
        
