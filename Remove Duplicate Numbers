Given a list of integers nums, remove numbers that appear multiple times in the list, while maintaining order of the appearance in the original list.

It should use \mathcal{O}(k)O(k) space where k is the number of unique integers.

Constraints

n â‰¤ 100,000 where n is the length of nums
Example 1
Input

nums = [1, 3, 5, 0, 3, 5, 8]
Output

[1, 0, 8]


Solution:

Iterate through nums. Maintain a set of seen values, if a value has been seen add to dupe set (it's a duplicate). Iterate again and only choose values not in dupes set.

class Solution:
    def solve(self, nums):
        seen=set()
        DupSeen=set()
        for i in nums:
            if i not in seen:
                seen.add(i)
            else:
                DupSeen.add(i)
        return [i for i in nums if i not in DupSeen]
        
