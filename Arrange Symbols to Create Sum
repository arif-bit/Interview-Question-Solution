You are given a list of non-negative integers nums and an integer target. Return the number of ways there are to arrange + and - in nums such that the expression equals to target

Constraints

n ≤ 20 where n is the length of nums
m ≤ 1,000 where m is the sum of nums
Example 1
Input
nums = [1, 2, 2, 2, 1]
target = 6
Output
2


Solution:

import functools
class Solution:
    def solve(self, nums, target):
        n = len(nums)

        @functools.lru_cache(None)
        def dp(pos, rsum):
            if pos == n:
                if rsum == target:
                    return 1
                else:
                    return 0
            else:
                return dp(pos + 1, rsum + nums[pos]) + dp(pos +1, rsum - nums[pos])

        return dp(0, 0)
        
        
