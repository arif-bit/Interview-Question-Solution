Alice and Bob are playing a game with a sorted list of positive integers nums. In a single turn, Alice selects any three integers. Bob deletes one of them, and then Alice deletes one of them. The list starts out with an odd number of integers.

Alice wishes to minimize the number of turns needed to make the list contain no repeated integers, Bob wishes to maximize the number of turns. Assuming Alice and Bob act optimally, return how many turns the game takes.

Constraints

1 ≤ n ≤ 100,000 where n is the length of nums
Example 1
Input
nums = [1, 1, 2, 3, 3]
Output
1
Explanation
If Alice selects [1, 1, 3], then regardless of whether Bob selects 1 or a 3, Alice can select the other number to get rid of all repeating numbers.


Solution:

If there are two repeated values, say [3, 3, 7, 7] is in A, then Alice can present [3, 3, 7]. Regardless of what Bob chooses, Alice can force the deletion of 2 repeated values, 
3 and 7. (This works even if the values are the same, eg. presenting [5, 5, 5]). In one move, Alice removes 2 repeated values, and there isn't any way to do better.

After, if there is one repeated value, say A = [1, 1, 2, 3], then Alice can present [1, 1, 2] and delete the final repeated value herself no matter what.

Hence, the answer is ( r+1 /2 )where r is the number of repeated values.

class Solution:
    def solve(self, nums):
        repeats=0
        for i in range(1,len(nums)):
            if nums[i]==nums[i-1]:
                repeats+=1
        return (repeats+1)//2



